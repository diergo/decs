import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java-library'
    id 'com.github.spotbugs' version '6.1.12'
    id 'jacoco'
    id 'maven-publish'
}

ext {
    junitVersion = '5.12.2'
}

version = "${majorVersion}.${minorVersion}.${patchVersion}"

// dependencies

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}",
        "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
        'org.hamcrest:hamcrest:3.0',
        'org.mockito:mockito-core:5.18.0'

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

// compiling

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    configure(options) {
        encoding = 'UTF-8'
        deprecation = true
        compilerArgs << "-Xlint:unchecked"
    }
}

// testing

test {
    useJUnitPlatform {
        excludeTags 'performance'
    }
    reports {
        html.required = true
    }
}

// publishing

javadoc {
    options {
        memberLevel = JavadocMemberLevel.PROTECTED
        author = false
        header "${project.description} ${project.version}"
        links 'https://docs.oracle.com/javase/8/docs/api/'
        encoding 'UTF-8'
        addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.withType(Jar).configureEach {
    from(project.projectDir) {
        include 'LICENSE'
        into('META-INF')
    }
    manifest {
        attributes(
            "Automatic-Module-Name": "diergo.csv",
            "Specification-Title": project.description,
            "Specification-Version": "${majorVersion}.${minorVersion}",
            "Specification-Vendor": vendor,
            "Implementation-Title": project.name,
            "Implementation-Version": "${majorVersion}.${minorVersion}.${patchVersion}",
            "Implementation-Vendor": vendor,
            "Implementation-Vendor-Id": project.group
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                description = project.description
                developers {
                    developer {
                        name = 'Arne Burmeister'
                        email = 'arne@burmeister-teltow.de'
                    }
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/${project.group}/${project.name}.git"
                    developerConnection = "scm:git:ssh:git@github.com:${project.group}/${project.name}.git"
                    url = "https://github.com/${project.group}/${project.name}"
                }
            }
        }
    }
}

// code analysis

tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                minimum = 0.9
            }
            limit {
                counter = 'LINE'
                minimum = 0.9
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
        }
    }
}

// performance test

tasks.register('performance', Test) {
    group JavaBasePlugin.VERIFICATION_GROUP
    description 'Runs the performance test suite.'
    useJUnitPlatform {
        includeTags 'performance'
    }
    reports {
        html.required = true
    }
}

tasks.register('downloadTestData') {
    ext.localCopy = file('src/test/resources/worldcities.csv')
    ext.tempFile = file('build/resources/worldcities.zip')
    outputs.file localCopy
    doLast {
        println "Loading test data from https://simplemaps.com/data/world-cities"
        ant {
            get(
                    src: "https://simplemaps.com/static/data/world-cities/basic/simplemaps_worldcities_basicv1.73.zip",
                    dest: tempFile,
            )
        }
        copy {
            from(zipTree(tempFile)) {
                include '*.csv'
            }
            into localCopy.parentFile
        }
    }
}

// task dependencies

check.dependsOn jacocoTestCoverageVerification, jacocoTestReport
assemble.dependsOn javadoc
performance.dependsOn downloadTestData
